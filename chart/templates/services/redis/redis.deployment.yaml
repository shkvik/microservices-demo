## Redis main/worker configs
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: {{ .Values.namespace }}
data:
  redis.conf: ""
---
## Service (NS)
apiVersion: v1
kind: Service
metadata:
  name: redis-main-svc
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: redis-main
  ports:
  - protocol: TCP
    port: 6379
  type: ClusterIP
---
## Redis main node priority class
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: redis-main-priority
value: 1000
globalDefault: false
description: "Priority class for Redis main node"
---
## Redis main node
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-main
  namespace: {{ .Values.namespace }}
spec:
  serviceName: redis-main-svc
  replicas: 1
  selector:
    matchLabels:
      app: redis
      role: main
  template:
    metadata:
      labels:
        app: redis
        role: main
    spec:
      priorityClassName: redis-main-priority
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: cache-pvc
        - name: redis-config
          configMap:
            name: redis-config
      initContainers:
        - name: redis-init-storage
          image: busybox
          command: ['sh', '-c', 'mkdir -p /redis/redis-data']
          volumeMounts:
            - name: redis-data
              mountPath: /redis
      containers:
        - name: redis
          image: redis:7
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /redis
            - name: redis-config
              mountPath: /etc/redis/redis.conf
              subPath: redis.conf
          command: ["redis-server", "/etc/redis/redis.conf", "dir", "/redis/redis-data"]
      nodeSelector: # Allow only on nodes with "persistence-managed-replicas" label
        persistence-managed-replicas: "true"
      affinity:
        podAntiAffinity: # Limit number of pods of the same type to 1 per node
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - redis
            topologyKey: "kubernetes.io/hostname"
---
## Redis Mirror nodes priority class
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: redis-worker-priority
value: 500
globalDefault: false
description: "Priority class for Redis workers"
---
## Redis Mirror nodes
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-worker
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ sub .Values.config.cache.replication.count 1 }}
  selector:
    matchLabels:
      app: redis
      role: worker
  template:
    metadata:
      labels:
        app: redis
        role: worker
    spec:
      priorityClassName: redis-worker-priority
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: cache-pvc
        - name: redis-config
          configMap:
            name: redis-config
      initContainers:
        - name: redis-init-storage
          image: busybox
          command: ['sh', '-c', 'mkdir -p /redis/redis-data']
          volumeMounts:
            - name: redis-data
              mountPath: /redis
      containers:
        - name: redis
          image: redis:7
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /redis-data
            - name: redis-config
              mountPath: /etc/redis/redis.conf
              subPath: redis.conf
          env:
            - name: REDIS_MAIN_HOST
              value: "redis-main-svc.{{ .Values.namespace }}.svc.cluster.local"
            - name: REDIS_MAIN_PORT
              value: "6379"
          command: ["redis-server", "/etc/redis/redis.conf", "dir", "/redis/redis-data", "--slaveof", "$(REDIS_MAIN_HOST)", "$(REDIS_MAIN_PORT)"]
      nodeSelector: # Allow only on nodes with "persistence-managed-replicas" label
        persistence-managed-replicas: "true"
      affinity:
        podAntiAffinity: # Limit number of pods of the same type to 1 per node
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - redis
            topologyKey: "kubernetes.io/hostname"
