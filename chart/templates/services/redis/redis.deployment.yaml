## Redis main node

apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: redis-main-priority
value: 1000
globalDefault: false
description: "Priority class for Redis main node"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-main
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      role: main
  serviceName: "redis-main"
  template:
    metadata:
      labels:
        app: redis
        role: main
    spec:
      priorityClassName: redis-main-priority
      containers:
        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
          env:
            - name: REDIS_MAIN_HOST
              value: "redis-main"
            - name: REDIS_MAIN_PORT
              value: "6379"
          command: ["redis-server"]
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: cache-pvc
      nodeSelector: # Allow only on nodes with "persistence-managed-replicas" label
        persistence-managed-replicas: "true"
      affinity:
        podAntiAffinity: # Limit number of pods of the same type to 1 per node
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - redis
            topologyKey: "kubernetes.io/hostname"
---

## Redis Worker nodes
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: redis-worker-priority
value: 500
globalDefault: false
description: "Priority class for Redis workers"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-worker
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ sub .Values.config.cache.replication.count 1 }}
  selector:
    matchLabels:
      app: redis
      role: worker
  serviceName: "redis-worker"
  template:
    metadata:
      labels:
        app: redis
        role: worker
    spec:
      priorityClassName: redis-worker-priority
      containers:
        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
          env:
            - name: REDIS_MAIN_HOST
              value: "redis-main"
            - name: REDIS_MAIN_PORT
              value: "6379"
          command: ["redis-server", "--slaveof", "$(REDIS_MAIN_HOST)", "$(REDIS_MAIN_PORT)"]
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: cache-pvc
      nodeSelector: # Allow only on nodes with "persistence-managed-replicas" label
        persistence-managed-replicas: "true"
      affinity:
        podAntiAffinity: # Limit number of pods of the same type to 1 per node
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - redis
            topologyKey: "kubernetes.io/hostname"
